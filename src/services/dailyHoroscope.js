// ../src/services/dailyHoroscope.js

/**
 * Daily Horoscope Service for Vedic Astrology
 * Provides personalized daily predictions based on Raashi, planetary transits, and Panchang
 */

import { calculateLunarDay, getPanchang, getCurrentPlanetaryPositions } from './vedicCalculations.js';

// Vedic Zodiac Signs with Sanskrit names
export const vedicSigns = {
  mesh: {
    name: "Mesh (Aries)",
    element: "Agni",
    lord: "Mangal",
    nature: "Chara",
    emoji: "тЩИ",
    lucky_numbers: [1, 8, 17],
    lucky_colors: ["рд▓рд╛рд▓", "рдирд╛рд░рдВрдЧреА"],
    gemstone: "рдореВрдВрдЧрд╛"
  },
  vrishabh: {
    name: "Vrishabh (Taurus)", 
    element: "Prithvi",
    lord: "Shukra",
    nature: "Sthira",
    emoji: "тЩЙ",
    lucky_numbers: [2, 6, 9],
    lucky_colors: ["рд╣рд░рд╛", "рдЧреБрд▓рд╛рдмреА"],
    gemstone: "рд╣реАрд░рд╛"
  },
  mithun: {
    name: "Mithun (Gemini)",
    element: "Vayu", 
    lord: "Budh",
    nature: "Dwiswa",
    emoji: "тЩК",
    lucky_numbers: [5, 14, 23],
    lucky_colors: ["рдкреАрд▓рд╛", "рд╣рд▓реНрдХрд╛ рд╣рд░рд╛"],
    gemstone: "рдкрдиреНрдирд╛"
  },
  kark: {
    name: "Kark (Cancer)",
    element: "Jal",
    lord: "Chandra",
    nature: "Chara", 
    emoji: "тЩЛ",
    lucky_numbers: [2, 7, 16],
    lucky_colors: ["рд╕рдлрд╝реЗрдж", "рдЪрд╛рдВрджреА"],
    gemstone: "рдореЛрддреА"
  },
  simha: {
    name: "Simha (Leo)",
    element: "Agni",
    lord: "Surya", 
    nature: "Sthira",
    emoji: "тЩМ",
    lucky_numbers: [1, 4, 13],
    lucky_colors: ["рд╕реБрдирд╣рд░рд╛", "рдирд╛рд░рдВрдЧреА"],
    gemstone: "рдорд╛рдгрд┐рдХ"
  },
  kanya: {
    name: "Kanya (Virgo)",
    element: "Prithvi",
    lord: "Budh",
    nature: "Dwiswa",
    emoji: "тЩН", 
    lucky_numbers: [6, 15, 24],
    lucky_colors: ["рд╣рд░рд╛", "рднреВрд░рд╛"],
    gemstone: "рдкрдиреНрдирд╛"
  },
  tula: {
    name: "Tula (Libra)",
    element: "Vayu",
    lord: "Shukra",
    nature: "Chara",
    emoji: "тЩО",
    lucky_numbers: [6, 15, 24],
    lucky_colors: ["рдиреАрд▓рд╛", "рдЧреБрд▓рд╛рдмреА"], 
    gemstone: "рд╣реАрд░рд╛"
  },
  vrishchik: {
    name: "Vrishchik (Scorpio)",
    element: "Jal",
    lord: "Mangal",
    nature: "Sthira", 
    emoji: "тЩП",
    lucky_numbers: [4, 13, 22],
    lucky_colors: ["рд▓рд╛рд▓", "рдЧрд╣рд░рд╛ рд▓рд╛рд▓"],
    gemstone: "рдореВрдВрдЧрд╛"
  },
  dhanu: {
    name: "Dhanu (Sagittarius)",
    element: "Agni", 
    lord: "Guru",
    nature: "Dwiswa",
    emoji: "тЩР",
    lucky_numbers: [3, 12, 21],
    lucky_colors: ["рдкреАрд▓рд╛", "рдирд╛рд░рдВрдЧреА"],
    gemstone: "рдкреБрдЦрд░рд╛рдЬ"
  },
  makar: {
    name: "Makar (Capricorn)",
    element: "Prithvi",
    lord: "Shani",
    nature: "Chara",
    emoji: "тЩС",
    lucky_numbers: [8, 17, 26],
    lucky_colors: ["рдХрд╛рд▓рд╛", "рдЧрд╣рд░рд╛ рдиреАрд▓рд╛"],
    gemstone: "рдиреАрд▓рдо"
  },
  kumbh: {
    name: "Kumbh (Aquarius)",
    element: "Vayu",
    lord: "Shani", 
    nature: "Sthira",
    emoji: "тЩТ",
    lucky_numbers: [4, 13, 22],
    lucky_colors: ["рдиреАрд▓рд╛", "рдмреИрдВрдЧрдиреА"],
    gemstone: "рдиреАрд▓рдо"
  },
  meen: {
    name: "Meen (Pisces)",
    element: "Jal",
    lord: "Guru",
    nature: "Dwiswa",
    emoji: "тЩУ",
    lucky_numbers: [3, 9, 12],
    lucky_colors: ["рд╕рдореБрджреНрд░реА рд╣рд░рд╛", "рдкреАрд▓рд╛"],
    gemstone: "рдкреБрдЦрд░рд╛рдЬ"
  }
};

// Daily horoscope predictions based on planetary combinations
const horoscopePredictions = {
  love: {
    excellent: [
      "рдЖрдЬ рдкреНрд░реЗрдо рдХреЗ рдорд╛рдорд▓реЗ рдореЗрдВ рдЖрдкрдХрд╛ рджрд┐рди рд╢рд╛рдирджрд╛рд░ рд░рд╣реЗрдЧрд╛! рд╢реБрдХреНрд░ рдЖрдкрдХреЗ рд╕рд╛рде рд╣реИ ЁЯТХ",
      "рдЖрдкрдХреЗ рд░рд┐рд╢реНрддреЗ рдореЗрдВ рдорд┐рдард╛рд╕ рдЖрдПрдЧреА, рдирдпрд╛ рдкреНрд░реЗрдо рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИ тЬи",
      "рдкреНрд░реЗрдореА рд╕реЗ рдореБрд▓рд╛рдХрд╛рдд рд╣реЛ рд╕рдХрддреА рд╣реИ, рд░реЛрдорд╛рдВрд╕ рдХрд╛ рдорд╛рд╣реМрд▓ рд░рд╣реЗрдЧрд╛ ЁЯМ╣"
    ],
    good: [
      "рдкреНрд░реЗрдо рдЬреАрд╡рди рдореЗрдВ рд╕рд╛рдорд╛рдиреНрдп рдЦреБрд╢реА рд░рд╣реЗрдЧреА, рдЫреЛрдЯреА-рдореЛрдЯреА рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд╕рдХрддреА рд╣реИ",
      "рдкрд╛рд░реНрдЯрдирд░ рдХреЗ рд╕рд╛рде рд╕рдордЭрджрд╛рд░реА рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ, рдорддрднреЗрдж рджреВрд░ рд╣реЛрдВрдЧреЗ",
      "рдкреБрд░рд╛рдиреЗ рд░рд┐рд╢реНрддреЗ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреЗ рдЖрд╕рд╛рд░ рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВ"
    ],
    average: [
      "рдкреНрд░реЗрдо рдорд╛рдорд▓реЛрдВ рдореЗрдВ рдзреИрд░реНрдп рд░рдЦреЗрдВ, рдЬрд▓реНрджрдмрд╛рдЬреА рди рдХрд░реЗрдВ",
      "рдХрд┐рд╕реА рдмрд╛рдд рдХреЛ рд▓реЗрдХрд░ рдкрд╛рд░реНрдЯрдирд░ рд╕реЗ рдмрд╣рд╕ рд╣реЛ рд╕рдХрддреА рд╣реИ",
      "рдЕрдкрдиреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЛ control рдореЗрдВ рд░рдЦрдирд╛ рдЬрд░реВрд░реА рд╣реИ"
    ]
  },
  career: {
    excellent: [
      "рдХрд░рд┐рдпрд░ рдореЗрдВ рдмрдбрд╝реА рд╕рдлрд▓рддрд╛ рдорд┐рд▓ рд╕рдХрддреА рд╣реИ! рдЧреБрд░реБ рдЧреНрд░рд╣ рдЖрдкрдХреЗ рд╕рд╛рде рд╣реИ ЁЯЪА",
      "рдирдИ рдиреМрдХрд░реА рдпрд╛ рдкреНрд░рдореЛрд╢рди рдХреЗ рдпреЛрдЧ рдмрди рд░рд╣реЗ рд╣реИрдВ",
      "рд╡реНрдпрд╛рдкрд╛рд░ рдореЗрдВ рдЕрдЪреНрдЫрд╛ рдореБрдирд╛рдлрд╛ рд╣реЛрдЧрд╛, рдирд┐рд╡реЗрд╢ рдХрд░рдиреЗ рдХрд╛ рдЕрдЪреНрдЫрд╛ рд╕рдордп"
    ],
    good: [
      "рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рдорд┐рд▓реЗрдЧрд╛",
      "рд╕рд╣рдХрд░реНрдорд┐рдпреЛрдВ рдХрд╛ рд╕рд╛рде рдорд┐рд▓реЗрдЧрд╛, рдЯреАрдо рд╡рд░реНрдХ рдЕрдЪреНрдЫрд╛ рд░рд╣реЗрдЧрд╛",
      "рдирдП рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХреА рд╢реБрд░реБрдЖрдд рд╣реЛ рд╕рдХрддреА рд╣реИ"
    ],
    average: [
      "рдХрд╛рдо рдореЗрдВ рдереЛрдбрд╝реА рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд╕рдХрддреА рд╣реИ, рдзреИрд░реНрдп рд░рдЦреЗрдВ",
      "рдмреЙрд╕ рд╕реЗ рдмрдЪрдХрд░ рд░рд╣реЗрдВ, рдХреЛрдИ рдЧрд▓рддреА рди рдХрд░реЗрдВ",
      "рдлрд╛рдЗрдиреЗрдВрд╢рд┐рдпрд▓ рдорд╛рдорд▓реЛрдВ рдореЗрдВ рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ"
    ]
  },
  health: {
    excellent: [
      "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреЗрд╣рддрд░реАрди рд░рд╣реЗрдЧрд╛! рдКрд░реНрдЬрд╛ рд╕реЗ рднрд░рдкреВрд░ рджрд┐рди рд╣реЛрдЧрд╛ ЁЯТк",
      "рдпреЛрдЧ рдФрд░ meditation рдХрд╛ рдлрд╛рдпрджрд╛ рджрд┐рдЦреЗрдЧрд╛",
      "рдкреБрд░рд╛рдиреА рдмреАрдорд╛рд░реА рд╕реЗ рд░рд╛рд╣рдд рдорд┐рд▓ рд╕рдХрддреА рд╣реИ"
    ],
    good: [
      "рд╕рд╛рдорд╛рдиреНрдпрддрдГ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдареАрдХ рд░рд╣реЗрдЧрд╛",
      "рд╣рд▓реНрдХреА-рдлреБрд▓реНрдХреА exercise рдХрд░рдирд╛ рдлрд╛рдпрджреЗрдордВрдж рд╣реЛрдЧрд╛",
      "рдЦрд╛рдирдкрд╛рди рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ, рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд▓реЗрдВ"
    ],
    average: [
      "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛ рдЦрд╛рд╕ рдЦреНрдпрд╛рд▓ рд░рдЦреЗрдВ, рд▓рд╛рдкрд░рд╡рд╛рд╣реА рди рдмрд░рддреЗрдВ",
      "рд╕рд┐рд░рджрд░реНрдж рдпрд╛ рдкреЗрдЯ рдХреА рддрдХрд▓реАрдл рд╣реЛ рд╕рдХрддреА рд╣реИ",
      "рдЬреНрдпрд╛рджрд╛ рдореЗрд╣рдирдд рд╕реЗ рдмрдЪреЗрдВ, рдЖрд░рд╛рдо рдХрд░реЗрдВ"
    ]
  },
  finance: {
    excellent: [
      "рдзрди рд▓рд╛рдн рдХреЗ рдпреЛрдЧ рд╣реИрдВ! рд▓рдХреНрд╖реНрдореА рдЬреА рдХреА рдХреГрдкрд╛ рд░рд╣реЗрдЧреА ЁЯТ░",
      "рдирд┐рд╡реЗрд╢ рдХрд░рдиреЗ рдХрд╛ рд╢реБрдн рдореБрд╣реВрд░реНрдд рд╣реИ",
      "рдкреБрд░рд╛рдирд╛ рдкреИрд╕рд╛ рд╡рд╛рдкрд╕ рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИ"
    ],
    good: [
      "рдЖрд░реНрдерд┐рдХ рд╕реНрдерд┐рддрд┐ рдореЗрдВ рд╕реБрдзрд╛рд░ рд╣реЛрдЧрд╛",
      "рдЫреЛрдЯрд╛-рдореЛрдЯрд╛ рдлрд╛рдпрджрд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ",
      "рдЦрд░реНрдЪ control рдореЗрдВ рд░рд╣реЗрдЧрд╛"
    ],
    average: [
      "рдкреИрд╕реЗ рдХреЗ рдорд╛рдорд▓реЗ рдореЗрдВ рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ",
      "рдлрд┐рдЬреВрд▓рдЦрд░реНрдЪреА рд╕реЗ рдмрдЪреЗрдВ",
      "рдХрд┐рд╕реА рдХреЛ рдкреИрд╕реЗ рдЙрдзрд╛рд░ рди рджреЗрдВ"
    ]
  }
};

// Remedies based on weak planets
const dailyRemedies = {
  surya: [
    "рд╕реВрд░реНрдпреЛрджрдп рдХреЗ рд╕рдордп рд╕реВрд░реНрдп рдХреЛ рдЬрд▓ рдЕрд░реНрдкрд┐рдд рдХрд░реЗрдВ",
    "рд▓рд╛рд▓ рд░рдВрдЧ рдХреЗ рд╡рд╕реНрддреНрд░ рдкрд╣рдиреЗрдВ",
    "рд░рд╡рд┐рд╡рд╛рд░ рдХреЛ рд╕реВрд░реНрдп рдордВрддреНрд░ рдХрд╛ рдЬрд╛рдк рдХрд░реЗрдВ"
  ],
  chandra: [
    "рд╕реЛрдорд╡рд╛рд░ рдХреЛ рднрдЧрд╡рд╛рди рд╢рд┐рд╡ рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рд╕рдлреЗрдж рд░рдВрдЧ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
    "рджреВрдз рдХрд╛ рджрд╛рди рдХрд░реЗрдВ"
  ],
  mangal: [
    "рдордВрдЧрд▓рд╡рд╛рд░ рдХреЛ рд╣рдиреБрдорд╛рди рдЬреА рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рд▓рд╛рд▓ рдлреВрд▓ рдЪрдврд╝рд╛рдПрдВ",
    "рдореВрдВрдЧрд╛ рдзрд╛рд░рдг рдХрд░реЗрдВ"
  ],
  budh: [
    "рдмреБрдзрд╡рд╛рд░ рдХреЛ рдЧрдгреЗрд╢ рдЬреА рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рд╣рд░реЗ рд░рдВрдЧ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
    "рд╡рд┐рджреНрдпрд╛рд░реНрдерд┐рдпреЛрдВ рдХреА рдорджрдж рдХрд░реЗрдВ"
  ],
  guru: [
    "рдЧреБрд░реБрд╡рд╛рд░ рдХреЛ рдЧреБрд░реБ рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рдкреАрд▓реЗ рд╡рд╕реНрддреНрд░ рдзрд╛рд░рдг рдХрд░реЗрдВ",
    "рдмреНрд░рд╛рд╣реНрдордгреЛрдВ рдХреЛ рднреЛрдЬрди рдХрд░рд╛рдПрдВ"
  ],
  shukra: [
    "рд╢реБрдХреНрд░рд╡рд╛рд░ рдХреЛ рд▓рдХреНрд╖реНрдореА рдорд╛рдВ рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рд╕рдлреЗрдж рдпрд╛ рдЧреБрд▓рд╛рдмреА рд╡рд╕реНрддреНрд░ рдкрд╣рдиреЗрдВ",
    "рдЪрд╛рдВрджреА рдХрд╛ рдЖрднреВрд╖рдг рдзрд╛рд░рдг рдХрд░реЗрдВ"
  ],
  shani: [
    "рд╢рдирд┐рд╡рд╛рд░ рдХреЛ рд╢рдирд┐ рджреЗрд╡ рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ",
    "рдХрд╛рд▓реЗ рддрд┐рд▓ рдХрд╛ рджрд╛рди рдХрд░реЗрдВ",
    "рдиреАрд▓реЗ рд░рдВрдЧ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ"
  ]
};

/**
 * Generate daily horoscope for a specific Raashi using REAL Vedic calculations
 */
export function generateDailyHoroscope(raashi, date = new Date()) {
  const signInfo = vedicSigns[raashi.toLowerCase()];
  if (!signInfo) {
    throw new Error("Invalid Raashi provided");
  }

  // Use REAL Vedic calculations instead of simple math
  const panchang = getPanchang(date);
  const planetaryPositions = getCurrentPlanetaryPositions(date);
  const currentNakshatra = getCurrentNakshatra(date);
  
  // Analyze real planetary influences for the sign
  const signLord = getSignLord(raashi);
  const signAnalysis = analyzeRealSignInfluences(raashi, planetaryPositions);
  const transits = calculateRealTransits(raashi, planetaryPositions);
  
  // Generate predictions based on actual planetary positions and Vedic principles
  const predictions = generateRealVedicPredictions(signInfo, signAnalysis, transits, panchang);
  
  // Get real remedies based on current planetary positions
  const todayRemedies = getRealVedicRemedies(signAnalysis, transits, panchang);
  
  // Lucky elements based on current planetary strengths
  const luckyElements = getRealLuckyElements(signInfo, planetaryPositions, date);

  return {
    date: date.toLocaleDateString('hi-IN'),
    weekday: date.toLocaleDateString('hi-IN', { weekday: 'long' }),
    raashi: signInfo.name,
    emoji: signInfo.emoji,
    signLord: signLord,
    panchang: {
      tithi: panchang.tithi,
      nakshatra: panchang.nakshatra,
      yoga: panchang.yoga,
      karana: panchang.karana
    },
    planetaryInfluences: {
      signLordPosition: planetaryPositions[signLord]?.sign,
      signLordStrength: signAnalysis.lordStrength,
      beneficPlanets: signAnalysis.beneficPlanets,
      maleficPlanets: signAnalysis.maleficPlanets,
      majorTransits: transits.major
    },
    predictions: {
      overall: predictions.overall,
      love: predictions.love,
      career: predictions.career,
      health: predictions.health,
      finance: predictions.finance
    },
    luckyElements: luckyElements,
    remedies: todayRemedies,
    mantra: getSignMantra(raashi),
    auspiciousTime: getAuspiciousTime(date),
    warning: getRealVedicWarning(transits, panchang),
    accuracy: "Enhanced - Based on real planetary positions",
    calculationMethod: "Vedic Sidereal Zodiac with Ayanamsa correction"
  };
}

/**
 * Get sign lord planet
 */
function getSignLord(raashi) {
  const signLords = {
    mesh: 'mangal',      // Aries - Mars
    vrishabh: 'shukra',  // Taurus - Venus  
    mithun: 'budh',      // Gemini - Mercury
    kark: 'chandra',     // Cancer - Moon
    simha: 'surya',      // Leo - Sun
    kanya: 'budh',       // Virgo - Mercury
    tula: 'shukra',      // Libra - Venus
    vrishchik: 'mangal', // Scorpio - Mars
    dhanu: 'guru',       // Sagittarius - Jupiter
    makar: 'shani',      // Capricorn - Saturn
    kumbh: 'shani',      // Aquarius - Saturn
    meen: 'guru'         // Pisces - Jupiter
  };
  return signLords[raashi.toLowerCase()];
}

/**
 * Analyze real planetary influences on the sign
 */
function analyzeRealSignInfluences(raashi, planetaryPositions) {
  const signLord = getSignLord(raashi);
  const lordPosition = planetaryPositions[signLord];
  
  const analysis = {
    lordStrength: calculateRealPlanetaryStrength(signLord, lordPosition),
    beneficPlanets: [],
    maleficPlanets: [],
    aspectingPlanets: [],
    overallEnergy: 0
  };

  // Analyze each planet's influence on this sign
  Object.keys(planetaryPositions).forEach(planet => {
    const planetData = planetaryPositions[planet];
    const influence = calculatePlanetaryInfluence(planet, planetData, raashi);
    
    if (influence > 0) {
      analysis.beneficPlanets.push({
        planet: planet,
        strength: influence,
        position: planetData.sign,
        effect: getPlanetaryEffect(planet, influence)
      });
      analysis.overallEnergy += influence;
    } else if (influence < 0) {
      analysis.maleficPlanets.push({
        planet: planet,
        strength: Math.abs(influence),
        position: planetData.sign,
        challenge: getPlanetaryChallenge(planet, Math.abs(influence))
      });
      analysis.overallEnergy += influence;
    }
  });

  return analysis;
}

/**
 * Calculate real transits affecting the sign
 */
function calculateRealTransits(raashi, planetaryPositions) {
  const transits = {
    major: [],
    daily: [],
    aspectual: []
  };

  const signOrder = ['mesh', 'vrishabh', 'mithun', 'kark', 'simha', 'kanya', 
                    'tula', 'vrishchik', 'dhanu', 'makar', 'kumbh', 'meen'];
  const raashiIndex = signOrder.indexOf(raashi.toLowerCase());

  Object.keys(planetaryPositions).forEach(planet => {
    const planetData = planetaryPositions[planet];
    const planetSignIndex = signOrder.indexOf(planetData.sign);
    const housePosition = ((planetSignIndex - raashiIndex + 12) % 12) + 1;
    
    const transitEffect = getTransitEffect(planet, housePosition, planetData);
    
    if (transitEffect.significance === 'major') {
      transits.major.push({
        planet: planet,
        house: housePosition,
        effect: transitEffect.effect,
        intensity: transitEffect.intensity,
        isRetrograde: planetData.isRetrograde
      });
    }
  });

  return transits;
}

/**
 * Generate predictions based on real Vedic analysis
 */
function generateRealVedicPredictions(signInfo, signAnalysis, transits, panchang) {
  const predictions = {
    overall: generateOverallPrediction(signAnalysis, panchang),
    love: generateLovePredictionReal(signAnalysis, transits),
    career: generateCareerPredictionReal(signAnalysis, transits),
    health: generateHealthPredictionReal(signAnalysis, transits),
    finance: generateFinancePredictionReal(signAnalysis, transits)
  };

  return predictions;
}

/**
 * Real prediction generators based on planetary analysis
 */
function generateOverallPrediction(signAnalysis, panchang) {
  if (signAnalysis.overallEnergy > 2) {
    return `рдЖрдЬ ${panchang.nakshatra.name} рдирдХреНрд╖рддреНрд░ рдореЗрдВ рдЧреНрд░рд╣реЛрдВ рдХреА рд╢реБрдн рд╕реНрдерд┐рддрд┐ рд╕реЗ рдЖрдкрдХрд╛ рджрд┐рди рдЙрддреНрддрдо рд░рд╣реЗрдЧрд╛ред рд╕рднреА рдХрд╛рд░реНрдпреЛрдВ рдореЗрдВ рд╕рдлрд▓рддрд╛ рдорд┐рд▓реЗрдЧреАред`;
  } else if (signAnalysis.overallEnergy < -1) {
    return `рдЖрдЬ рдЧреНрд░рд╣реЛрдВ рдХреА рдЪреБрдиреМрддреАрдкреВрд░реНрдг рд╕реНрдерд┐рддрд┐ рдХреЗ рдХрд╛рд░рдг рдзреИрд░реНрдп рдФрд░ рд╕рд╛рд╡рдзрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред ${panchang.nakshatra.name} рдирдХреНрд╖рддреНрд░ рдореЗрдВ рд╕рдВрдпрдо рдмрд░рддреЗрдВред`;
  } else {
    return `рдЖрдЬ рдорд┐рд╢реНрд░рд┐рдд рдлрд▓ рдХреА рд╕реНрдерд┐рддрд┐ рд╣реИред ${panchang.nakshatra.name} рдирдХреНрд╖рддреНрд░ рдореЗрдВ рд╕рдВрддреБрд▓рд┐рдд рджреГрд╖реНрдЯрд┐рдХреЛрдг рд░рдЦреЗрдВред`;
  }
}

function generateLovePredictionReal(signAnalysis, transits) {
  const venusInfluence = signAnalysis.beneficPlanets.find(p => p.planet === 'shukra');
  const venusTransit = transits.major.find(t => t.planet === 'shukra');
  
  if (venusInfluence || (venusTransit && [1, 5, 7, 11].includes(venusTransit.house))) {
    return "рд╢реБрдХреНрд░ рдЧреНрд░рд╣ рдХреА рдЕрдиреБрдХреВрд▓ рд╕реНрдерд┐рддрд┐ рд╕реЗ рдкреНрд░реЗрдо рдЬреАрд╡рди рдореЗрдВ рдЦреБрд╢рд┐рдпрд╛рдВ рдЖрдПрдВрдЧреАред рд░реЛрдорд╛рдВрд╕ рдХрд╛ рдорд╛рд╣реМрд▓ рд░рд╣реЗрдЧрд╛ред";
  } else if (transits.major.some(t => t.planet === 'mangal' && [6, 8, 12].includes(t.house))) {
    return "рдкреНрд░реЗрдо рдорд╛рдорд▓реЛрдВ рдореЗрдВ рдордВрдЧрд▓ рдЧреНрд░рд╣ рдХреЗ рдкреНрд░рднрд╛рд╡ рд╕реЗ рдереЛрдбрд╝реА рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВред рдЧреБрд╕реНрд╕реЗ рдкрд░ рдХрд╛рдмреВ рд░рдЦреЗрдВред";
  }
  return "рдкреНрд░реЗрдо рдЬреАрд╡рди рдореЗрдВ рд╕рд╛рдорд╛рдиреНрдп рд╕реНрдерд┐рддрд┐ рд░рд╣реЗрдЧреАред рдкрд╛рд░реНрдЯрдирд░ рдХреЗ рд╕рд╛рде рд╕рдордЭрджрд╛рд░реА рджрд┐рдЦрд╛рдПрдВред";
}

function generateCareerPredictionReal(signAnalysis, transits) {
  const saturnTransit = transits.major.find(t => t.planet === 'shani');
  const jupiterTransit = transits.major.find(t => t.planet === 'guru');
  
  if (jupiterTransit && [1, 5, 9, 10, 11].includes(jupiterTransit.house)) {
    return "рдЧреБрд░реБ рдЧреНрд░рд╣ рдХреА рд╢реБрдн рд╕реНрдерд┐рддрд┐ рдХрд░рд┐рдпрд░ рдореЗрдВ рдкреНрд░рдЧрддрд┐ рдХреЗ рдЕрд╡рд╕рд░ рд▓реЗрдХрд░ рдЖрдПрдЧреАред рдирдИ рдЬрд┐рдореНрдореЗрджрд╛рд░рд┐рдпрд╛рдВ рдорд┐рд▓ рд╕рдХрддреА рд╣реИрдВред";
  } else if (saturnTransit && [6, 10, 11].includes(saturnTransit.house)) {
    return "рд╢рдирд┐ рдЧреНрд░рд╣ рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рджрд┐рд▓рд╛рдПрдЧреАред рдзреИрд░реНрдп рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░реЗрдВред";
  }
  return "рдХрд░рд┐рдпрд░ рдореЗрдВ рд╕реНрдерд┐рд░ рдкреНрд░рдЧрддрд┐ рд╣реЛрдЧреАред рдЕрдкрдиреЗ рд▓рдХреНрд╖реНрдпреЛрдВ рдкрд░ рдлреЛрдХрд╕ рдмрдирд╛рдП рд░рдЦреЗрдВред";
}

function generateHealthPredictionReal(signAnalysis, transits) {
  const marsTransit = transits.major.find(t => t.planet === 'mangal');
  const sunInfluence = signAnalysis.beneficPlanets.find(p => p.planet === 'surya');
  
  if (marsTransit && [6, 8, 12].includes(marsTransit.house)) {
    return "рдордВрдЧрд▓ рдЧреНрд░рд╣ рдХреА рд╕реНрдерд┐рддрд┐ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдВ рд╕рд╛рд╡рдзрд╛рдиреА рдХреА рдорд╛рдВрдЧ рдХрд░рддреА рд╣реИред рджреБрд░реНрдШрдЯрдирд╛рдУрдВ рд╕реЗ рдмрдЪреЗрдВред";
  } else if (sunInfluence) {
    return "рд╕реВрд░реНрдп рдЧреНрд░рд╣ рдХреА рдХреГрдкрд╛ рд╕реЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЙрддреНрддрдо рд░рд╣реЗрдЧрд╛ред рдКрд░реНрдЬрд╛ рдХрд╛ рд╕реНрддрд░ рдмреЗрд╣рддрд░ рд╣реЛрдЧрд╛ред";
  }
  return "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдорд╛рдиреНрдпрддрдГ рдареАрдХ рд░рд╣реЗрдЧрд╛ред рдпреЛрдЧ рдФрд░ рд╡реНрдпрд╛рдпрд╛рдо рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдВред";
}

function generateFinancePredictionReal(signAnalysis, transits) {
  const jupiterTransit = transits.major.find(t => t.planet === 'guru');
  const mercuryInfluence = signAnalysis.beneficPlanets.find(p => p.planet === 'budh');
  
  if (jupiterTransit && [2, 5, 9, 11].includes(jupiterTransit.house)) {
    return "рдЧреБрд░реБ рдЧреНрд░рд╣ рдХреА рдХреГрдкрд╛ рд╕реЗ рдзрди рд▓рд╛рдн рдХреЗ рдпреЛрдЧ рд╣реИрдВред рдирд┐рд╡реЗрд╢ рдХреЗ рдЕрдЪреНрдЫреЗ рдЕрд╡рд╕рд░ рдорд┐рд▓ рд╕рдХрддреЗ рд╣реИрдВред";
  } else if (mercuryInfluence) {
    return "рдмреБрдз рдЧреНрд░рд╣ рдХреА рдЕрдиреБрдХреВрд▓ рд╕реНрдерд┐рддрд┐ рд╡реНрдпрд╛рдкрд╛рд░ рдФрд░ рд╡рд┐рддреНрддреАрдп рд▓реЗрди-рджреЗрди рдореЗрдВ рд╕рдлрд▓рддрд╛ рджрд┐рд▓рд╛рдПрдЧреАред";
  }
  return "рд╡рд┐рддреНрддреАрдп рдорд╛рдорд▓реЛрдВ рдореЗрдВ рд╕рдВрдпрдо рдмрд░рддреЗрдВред рд╕реЛрдЪ-рд╕рдордЭрдХрд░ рдирд┐рд╡реЗрд╢ рдХрд░реЗрдВред";
}

/**
 * Helper functions for real calculations
 */
function calculateRealPlanetaryStrength(planet, planetData) {
  if (!planetData) return 'neutral';
  
  // Check exaltation/debilitation/own sign
  const planetaryDignity = {
    surya: { exaltation: 'mesh', debilitation: 'tula', ownSign: ['simha'] },
    chandra: { exaltation: 'vrishabh', debilitation: 'vrishchik', ownSign: ['kark'] },
    mangal: { exaltation: 'makar', debilitation: 'kark', ownSign: ['mesh', 'vrishchik'] },
    budh: { exaltation: 'kanya', debilitation: 'meen', ownSign: ['mithun', 'kanya'] },
    guru: { exaltation: 'kark', debilitation: 'makar', ownSign: ['dhanu', 'meen'] },
    shukra: { exaltation: 'meen', debilitation: 'kanya', ownSign: ['vrishabh', 'tula'] },
    shani: { exaltation: 'tula', debilitation: 'mesh', ownSign: ['makar', 'kumbh'] }
  };
  
  const dignity = planetaryDignity[planet];
  if (!dignity) return 'neutral';
  
  if (dignity.exaltation === planetData.sign) return 'strong';
  if (dignity.debilitation === planetData.sign) return 'weak';
  if (dignity.ownSign.includes(planetData.sign)) return 'strong';
  
  return 'neutral';
}

function calculatePlanetaryInfluence(planet, planetData, raashi) {
  // Calculate influence based on planetary friendship, house position, strength, etc.
  let influence = 0;
  
  // Basic planetary nature for each sign
  const planetaryNature = {
    surya: 1, chandra: 1, guru: 2, shukra: 1, budh: 0,
    mangal: -1, shani: -1, rahu: -2, ketu: -1
  };
  
  influence += planetaryNature[planet] || 0;
  
  // Adjust for planetary strength
  const strength = calculateRealPlanetaryStrength(planet, planetData);
  if (strength === 'strong') influence += 1;
  if (strength === 'weak') influence -= 1;
  
  // Adjust for retrograde motion
  if (planetData.isRetrograde && planet !== 'rahu' && planet !== 'ketu') {
    influence *= 0.7; // Reduce influence for retrograde planets
  }
  
  return influence;
}

function getTransitEffect(planet, housePosition, planetData) {
  const significantPlanets = ['guru', 'shani', 'rahu', 'ketu'];
  const significance = significantPlanets.includes(planet) ? 'major' : 'minor';
  
  let effect = 'neutral';
  let intensity = 'medium';
  
  // Benefic houses: 1, 3, 5, 9, 10, 11
  if ([1, 3, 5, 9, 10, 11].includes(housePosition)) {
    effect = 'beneficial';
    intensity = [1, 5, 9, 10].includes(housePosition) ? 'high' : 'medium';
  }
  // Challenging houses: 6, 8, 12
  else if ([6, 8, 12].includes(housePosition)) {
    effect = 'challenging';
    intensity = [8, 12].includes(housePosition) ? 'high' : 'medium';
  }
  
  return { significance, effect, intensity };
}

function getRealVedicRemedies(signAnalysis, transits, panchang) {
  const remedies = {
    planetary: [],
    general: [],
    today: [],
    gemstone: '',
    mantra: '',
    donation: ''
  };

  // Remedies based on weak sign lord
  if (signAnalysis.lordStrength === 'weak') {
    remedies.planetary.push("рдЕрдкрдиреЗ рд░рд╛рд╢рд┐ рд╕реНрд╡рд╛рдореА рдЧреНрд░рд╣ рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ");
    remedies.planetary.push("рд░рд╛рд╢рд┐ рд╕реНрд╡рд╛рдореА рдХреЗ рдЕрдиреБрдХреВрд▓ рд░рддреНрди рдзрд╛рд░рдг рдХрд░реЗрдВ");
  }

  // Remedies for challenging transits
  signAnalysis.maleficPlanets.forEach(maleficPlanet => {
    const planetRemedies = getPlanetaryRemedies(maleficPlanet.planet);
    remedies.planetary.push(...planetRemedies);
  });

  // Today specific remedies based on nakshatra
  if (panchang.nakshatra.guna === 'рддрдорд╕') {
    remedies.today.push("рдЖрдЬ рддрд╛рдорд╕рд┐рдХ рдирдХреНрд╖рддреНрд░ рдореЗрдВ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕рд╛рдзрдирд╛ рдХрд░реЗрдВ");
    remedies.today.push("рдХрд╛рд▓реЗ рддрд┐рд▓ рдХрд╛ рджрд╛рди рдХрд░реЗрдВ");
  }

  // General daily remedies
  remedies.general = [
    "рд╕реБрдмрд╣ рдЙрдардХрд░ рд╕реВрд░реНрдп рдирдорд╕реНрдХрд╛рд░ рдХрд░реЗрдВ",
    `${panchang.nakshatra.name} рдирдХреНрд╖рддреНрд░ рдХреЗ рджреЗрд╡рддрд╛ ${panchang.nakshatra.deity} рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ`,
    "рдЧрд╛рдпрддреНрд░реА рдордВрддреНрд░ рдХрд╛ рдЬрд╛рдк рдХрд░реЗрдВ"
  ];

  return remedies;
}

function getRealLuckyElements(signInfo, planetaryPositions, date) {
  return {
    numbers: signInfo.lucky_numbers,
    colors: signInfo.lucky_colors,
    direction: getAuspiciousDirection(date.getDay()),
    time: getAuspiciousTime(date),
    deity: getSignDeity(signInfo.lord),
    // Add planetary based lucky elements
    planetaryGems: getPlanetaryGems(planetaryPositions),
    favorablePlanets: Object.keys(planetaryPositions).filter(planet => 
      calculateRealPlanetaryStrength(planet, planetaryPositions[planet]) === 'strong'
    )
  };
}

function getRealVedicWarning(transits, panchang) {
  // Check for challenging transits
  const challengingTransits = transits.major.filter(t => t.effect === 'challenging');
  
  if (challengingTransits.length > 0) {
    const planet = challengingTransits[0].planet;
    return `рдЖрдЬ ${planet} рдЧреНрд░рд╣ рдХреА рдЪреБрдиреМрддреАрдкреВрд░реНрдг рд╕реНрдерд┐рддрд┐ рдХреЗ рдХрд╛рд░рдг ${getTransitWarning(planet)}`;
  }
  
  // Check for inauspicious time periods
  if (panchang.rahuKaal) {
    return `рдЖрдЬ ${panchang.rahuKaal.time} рд░рд╛рд╣реБ рдХрд╛рд▓ рдореЗрдВ рдХреЛрдИ рд╢реБрдн рдХрд╛рд░реНрдп рди рдХрд░реЗрдВ`;
  }
  
  return "рдЖрдЬ рд╕рд╛рдорд╛рдиреНрдпрддрдГ рд╢реБрдн рджрд┐рди рд╣реИ, рд▓реЗрдХрд┐рди рд╕рднреА рдХрд╛рд░реНрдп рд╕реЛрдЪ-рд╕рдордЭрдХрд░ рдХрд░реЗрдВ";
}

/**
 * Generate predictions for different life aspects
 */
function generatePredictions(raashi, date) {
  const dayOfWeek = date.getDay();
  const dateNum = date.getDate();
  
  // Simple algorithm based on day and raashi combination
  const loveScore = (dayOfWeek + dateNum + getSignNumber(raashi)) % 3;
  const careerScore = (dayOfWeek * 2 + dateNum + getSignNumber(raashi)) % 3;
  const healthScore = (dayOfWeek + dateNum * 2 + getSignNumber(raashi)) % 3;
  const financeScore = (dayOfWeek * 3 + dateNum + getSignNumber(raashi)) % 3;
  
  const levels = ['average', 'good', 'excellent'];
  
  return {
    overall: getOverallPrediction(loveScore, careerScore, healthScore, financeScore),
    love: getRandomPrediction(horoscopePredictions.love[levels[loveScore]]),
    career: getRandomPrediction(horoscopePredictions.career[levels[careerScore]]),
    health: getRandomPrediction(horoscopePredictions.health[levels[healthScore]]),
    finance: getRandomPrediction(horoscopePredictions.finance[levels[financeScore]])
  };
}

/**
 * Get overall prediction based on all aspects
 */
function getOverallPrediction(love, career, health, finance) {
  const average = (love + career + health + finance) / 4;
  
  if (average >= 2) {
    return "рдЖрдЬ рдЖрдкрдХрд╛ рджрд┐рди рдмрд╣реБрдд рд╢реБрдн рд╣реИ! рд╕рднреА рдХреНрд╖реЗрддреНрд░реЛрдВ рдореЗрдВ рд╕рдлрд▓рддрд╛ рдорд┐рд▓реЗрдЧреА тЬи";
  } else if (average >= 1) {
    return "рдЖрдЬ рдХрд╛ рджрд┐рди рдорд┐рд╢реНрд░рд┐рдд рдлрд▓ рджреЗрдЧрд╛ред рдХреБрдЫ рдХреНрд╖реЗрддреНрд░реЛрдВ рдореЗрдВ рдЕрдЪреНрдЫреЗ рдкрд░рд┐рдгрд╛рдо рд╣реЛрдВрдЧреЗ ЁЯМЯ";
  } else {
    return "рдЖрдЬ рдзреИрд░реНрдп рдФрд░ рд╕рд╛рд╡рдзрд╛рдиреА рд╕реЗ рдХрд╛рдо рд▓реЗрдВред рд╣рд░ рдХрд╛рдо рд╕реЛрдЪ-рд╕рдордЭрдХрд░ рдХрд░реЗрдВ ЁЯЩП";
  }
}

/**
 * Get daily remedies for specific raashi
 */
function getDailyRemedies(raashi, date) {
  const signInfo = vedicSigns[raashi.toLowerCase()];
  const lordPlanet = signInfo.lord.toLowerCase();
  
  const baseRemedies = dailyRemedies[lordPlanet] || dailyRemedies.surya;
  
  // Add general daily remedies
  const generalRemedies = [
    "рд╕реБрдмрд╣ рдЙрдардХрд░ рд╕реВрд░реНрдп рдирдорд╕реНрдХрд╛рд░ рдХрд░реЗрдВ",
    "рддреБрд▓рд╕реА рдХреЗ рдкрддреНрддреЗ рдХрд╛ рд╕реЗрд╡рди рдХрд░реЗрдВ",
    "рдЧрд╛рдпрддреНрд░реА рдордВрддреНрд░ рдХрд╛ рдЬрд╛рдк рдХрд░реЗрдВ",
    "рджрд╛рди-рдкреБрдгреНрдп рдХрд░реЗрдВ"
  ];
  
  return {
    planetary: baseRemedies,
    general: getRandomPrediction(generalRemedies, 2),
    gemstone: `${signInfo.gemstone} рдзрд╛рд░рдг рдХрд░рдирд╛ рд╢реБрдн рд░рд╣реЗрдЧрд╛`,
    color: `рдЖрдЬ ${signInfo.lucky_colors[0]} рд░рдВрдЧ рдкрд╣рдирдирд╛ рдлрд╛рдпрджреЗрдордВрдж рд╣реЛрдЧрд╛`
  };
}

/**
 * Get lucky elements for the day
 */
function getLuckyElements(signInfo, date) {
  const dayOfWeek = date.getDay();
  
  return {
    numbers: signInfo.lucky_numbers,
    colors: signInfo.lucky_colors,
    direction: getAuspiciousDirection(dayOfWeek),
    time: getAuspiciousTime(date),
    deity: getAuspiciousDeity(signInfo.lord)
  };
}

/**
 * Get auspicious direction for the day
 */
function getAuspiciousDirection(dayOfWeek) {
  const directions = [
    "рдЙрддреНрддрд░", "рдЙрддреНрддрд░-рдкреВрд░реНрд╡", "рдкреВрд░реНрд╡", "рджрдХреНрд╖рд┐рдг-рдкреВрд░реНрд╡", 
    "рджрдХреНрд╖рд┐рдг", "рджрдХреНрд╖рд┐рдг-рдкрд╢реНрдЪрд┐рдо", "рдкрд╢реНрдЪрд┐рдо"
  ];
  return directions[dayOfWeek];
}

/**
 * Get auspicious time for the day
 */
function getAuspiciousTime(date) {
  const hours = [
    "рдкреНрд░рд╛рддрдГ 6-8 рдмрдЬреЗ", "рд╕реБрдмрд╣ 8-10 рдмрдЬреЗ", "рджреЛрдкрд╣рд░ 12-2 рдмрдЬреЗ",
    "рд╢рд╛рдо 4-6 рдмрдЬреЗ", "рд╕рд╛рдВрдп 6-8 рдмрдЬреЗ"
  ];
  return hours[date.getDay() % hours.length];
}

/**
 * Get deity for planetary lord
 */
function getAuspiciousDeity(lord) {
  const deities = {
    "Surya": "рд╕реВрд░реНрдп рджреЗрд╡",
    "Chandra": "рдЪрдВрджреНрд░ рджреЗрд╡", 
    "Mangal": "рд╣рдиреБрдорд╛рди рдЬреА",
    "Budh": "рдЧрдгреЗрд╢ рдЬреА",
    "Guru": "рдмреГрд╣рд╕реНрдкрддрд┐ рджреЗрд╡",
    "Shukra": "рд▓рдХреНрд╖реНрдореА рдорд╛рдВ",
    "Shani": "рд╢рдирд┐ рджреЗрд╡"
  };
  return deities[lord] || "рднрдЧрд╡рд╛рди рд╡рд┐рд╖реНрдгреБ";
}

/**
 * Get mantra for specific raashi
 */
function getSignMantra(raashi) {
  const mantras = {
    mesh: "реР рдЕрдВ рдЕрдирдЧрд╛рд░рд╛рдп рдирдордГ",
    vrishabh: "реР рд╢реБрдВ рд╢реБрдХреНрд░рд╛рдп рдирдордГ", 
    mithun: "реР рдмреБрдВ рдмреБрдзрд╛рдп рдирдордГ",
    kark: "реР рд╕реЛрдо рд╕реЛрдорд╛рдп рдирдордГ",
    simha: "реР рдШреГрдгрд┐ рд╕реВрд░реНрдпрд╛рдп рдирдордГ",
    kanya: "реР рдмреБрдВ рдмреБрдзрд╛рдп рдирдордГ",
    tula: "реР рд╢реБрдВ рд╢реБрдХреНрд░рд╛рдп рдирдордГ",
    vrishchik: "реР рдЕрдВ рдЕрдирдЧрд╛рд░рд╛рдп рдирдордГ", 
    dhanu: "реР рдмреГрд╣рд╕реНрдкрддрдпреЗ рдирдордГ",
    makar: "реР рд╢рдВ рд╢рдиреИрд╢реНрдЪрд░рд╛рдп рдирдордГ",
    kumbh: "реР рд╢рдВ рд╢рдиреИрд╢реНрдЪрд░рд╛рдп рдирдордГ",
    meen: "реР рдмреГрд╣рд╕реНрдкрддрдпреЗ рдирдордГ"
  };
  return mantras[raashi.toLowerCase()] || "реР рдирдореЛ рднрдЧрд╡рддреЗ рд╡рд╛рд╕реБрджреЗрд╡рд╛рдп";
}

/**
 * Get warning for the day
 */
function getWarning(raashi, date) {
  const warnings = [
    "рдЖрдЬ рд░рд╛рд╣реБ рдХрд╛рд▓ рдореЗрдВ рдХреЛрдИ рдирдпрд╛ рдХрд╛рдо рд╢реБрд░реВ рди рдХрд░реЗрдВ",
    "рдХрд┐рд╕реА рд╕реЗ рдмрд╣рд╕-рдЭрдЧрдбрд╝реЗ рд╕реЗ рдмрдЪреЗрдВ",
    "рдпрд╛рддреНрд░рд╛ рдХрд░рддреЗ рд╕рдордп рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ",
    "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛ рдЦрд╛рд╕ рдЦреНрдпрд╛рд▓ рд░рдЦреЗрдВ",
    "рдкреИрд╕реЗ рдХреЗ рд▓реЗрди-рджреЗрди рдореЗрдВ рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ"
  ];
  
  const dayOfWeek = date.getDay();
  return warnings[dayOfWeek % warnings.length];
}

/**
 * Utility functions
 */
export function getSignNumber(raashi) {
  const signs = Object.keys(vedicSigns);
  return signs.indexOf(raashi.toLowerCase()) + 1;
}

function getRandomPrediction(predictions, count = 1) {
  if (count === 1) {
    return predictions[Math.floor(Math.random() * predictions.length)];
  } else {
    const shuffled = [...predictions].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
  }
}

/**
 * Get horoscope for all signs
 */
export function getAllSignsHoroscope(date = new Date()) {
  const allHoroscopes = {};
  
  Object.keys(vedicSigns).forEach(raashi => {
    allHoroscopes[raashi] = generateDailyHoroscope(raashi, date);
  });
  
  return allHoroscopes;
}

/**
 * Get weekly horoscope summary
 */
export function getWeeklyHoroscope(raashi, startDate = new Date()) {
  const weeklyPredictions = [];
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(startDate);
    date.setDate(startDate.getDate() + i);
    
    weeklyPredictions.push({
      day: date.toLocaleDateString('hi-IN', { weekday: 'long' }),
      date: date.toLocaleDateString('hi-IN'),
      prediction: generateDailyHoroscope(raashi, date)
    });
  }
  
  return {
    raashi: vedicSigns[raashi.toLowerCase()].name,
    weekStarting: startDate.toLocaleDateString('hi-IN'),
    predictions: weeklyPredictions
  };
}

// Additional helper functions for real Vedic calculations

function getPlanetaryEffect(planet, strength) {
  const effects = {
    surya: "рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рдФрд░ рдиреЗрддреГрддреНрд╡ рдореЗрдВ рд╡реГрджреНрдзрд┐",
    chandra: "рдорд╛рдирд╕рд┐рдХ рд╢рд╛рдВрддрд┐ рдФрд░ рднрд╛рд╡рдирд╛рддреНрдордХ рд╕рдВрддреБрд▓рди", 
    mangal: "рд╕рд╛рд╣рд╕ рдФрд░ рдКрд░реНрдЬрд╛ рдореЗрдВ рд╡реГрджреНрдзрд┐",
    budh: "рдмреБрджреНрдзрд┐ рдФрд░ рд╕рдВрд╡рд╛рдж рдХреМрд╢рд▓ рдореЗрдВ рд╕реБрдзрд╛рд░",
    guru: "рдЬреНрдЮрд╛рди рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╡рд┐рдХрд╛рд╕",
    shukra: "рдкреНрд░реЗрдо рдФрд░ рд╕реБрдЦ-рд╕рдореГрджреНрдзрд┐ рдореЗрдВ рд╡реГрджреНрдзрд┐",
    shani: "рдЕрдиреБрд╢рд╛рд╕рди рдФрд░ рдХрдареЛрд░ рдкрд░рд┐рд╢реНрд░рдо рдХрд╛ рдлрд▓"
  };
  return effects[planet] || "рд╕рд╛рдорд╛рдиреНрдп рд╕рдХрд╛рд░рд╛рддреНрдордХ рдкреНрд░рднрд╛рд╡";
}

function getPlanetaryChallenge(planet, strength) {
  const challenges = {
    surya: "рдЕрд╣рдВрдХрд╛рд░ рдФрд░ рдХреНрд░реЛрдз рдкрд░ рдирд┐рдпрдВрддреНрд░рдг рд░рдЦреЗрдВ",
    chandra: "рдореВрдб рд╕реНрд╡рд┐рдВрдЧреНрд╕ рдФрд░ рднрд╛рд╡рдирд╛рддреНрдордХ рдЙрддрд╛рд░-рдЪрдврд╝рд╛рд╡ рд╕реЗ рдмрдЪреЗрдВ",
    mangal: "рдЧреБрд╕реНрд╕реЗ рдФрд░ рдЖрдХреНрд░рд╛рдордХрддрд╛ рдкрд░ рдХрд╛рдмреВ рд░рдЦреЗрдВ", 
    budh: "рдЧрд▓рдд рд╕рдВрд╡рд╛рдж рдФрд░ рднреНрд░рдо рд╕реЗ рдмрдЪреЗрдВ",
    guru: "рдЕрддрд┐ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реЗ рдмрдЪреЗрдВ",
    shukra: "рдЕрддреНрдпрдзрд┐рдХ рднреЛрдЧ-рд╡рд┐рд▓рд╛рд╕ рд╕реЗ рджреВрд░ рд░рд╣реЗрдВ",
    shani: "рдирд┐рд░рд╛рд╢рд╛ рдФрд░ рджреЗрд░реА рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдиреЗ рдХреЛ рддреИрдпрд╛рд░ рд░рд╣реЗрдВ"
  };
  return challenges[planet] || "рд╕рд╛рдорд╛рдиреНрдп рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ";
}

function getPlanetaryRemedies(planet) {
  const remedies = {
    surya: ["рд╕реВрд░реНрдп рдХреЛ рдЬрд▓ рдЕрд░реНрдкрд┐рдд рдХрд░реЗрдВ", "рд▓рд╛рд▓ рд░рдВрдЧ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ"],
    chandra: ["рд╕реЛрдорд╡рд╛рд░ рдХреЛ рджреВрдз рдХрд╛ рджрд╛рди рдХрд░реЗрдВ", "рдЪрд╛рдВрджреА рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    mangal: ["рдордВрдЧрд▓рд╡рд╛рд░ рдХреЛ рд╣рдиреБрдорд╛рди рдЬреА рдХреА рдкреВрдЬрд╛ рдХрд░реЗрдВ", "рд▓рд╛рд▓ рдореВрдВрдЧрд╛ рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    budh: ["рд╣рд░реЗ рд╡рд╕реНрддреНрд░ рдкрд╣рдиреЗрдВ", "рдкрдиреНрдирд╛ рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    guru: ["рдЧреБрд░реБрд╡рд╛рд░ рдХреЛ рдкреАрд▓реЗ рд╡рд╕реНрддреНрд░ рдкрд╣рдиреЗрдВ", "рдкреБрдЦрд░рд╛рдЬ рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    shukra: ["рд╢реБрдХреНрд░рд╡рд╛рд░ рдХреЛ рдЧрд╛рдп рдХреА рд╕реЗрд╡рд╛ рдХрд░реЗрдВ", "рд╣реАрд░рд╛ рдпрд╛ рдУрдкрд▓ рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    shani: ["рд╢рдирд┐рд╡рд╛рд░ рдХреЛ рддреЗрд▓ рдХрд╛ рджрд╛рди рдХрд░реЗрдВ", "рдиреАрд▓рдо рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    rahu: ["рд░рд╛рд╣реБ рд╢рд╛рдВрддрд┐ рдпрдЬреНрдЮ рдХрд░рд╛рдПрдВ", "рдЧреЛрдореЗрдж рдзрд╛рд░рдг рдХрд░реЗрдВ"],
    ketu: ["рдХреЗрддреБ рд╢рд╛рдВрддрд┐ рдкреВрдЬрд╛ рдХрд░реЗрдВ", "рд▓рд╣рд╕реБрдирд┐рдпрд╛ рдзрд╛рд░рдг рдХрд░реЗрдВ"]
  };
  return remedies[planet] || ["рд╕рд╛рдорд╛рдиреНрдп рдЧреНрд░рд╣ рд╢рд╛рдВрддрд┐ рдкреВрдЬрд╛ рдХрд░реЗрдВ"];
}

function getSignDeity(lordPlanet) {
  const deities = {
    surya: "рд╕реВрд░реНрдп рджреЗрд╡",
    chandra: "рдЪрдВрджреНрд░ рджреЗрд╡",
    mangal: "рд╣рдиреБрдорд╛рди рдЬреА",
    budh: "рдЧрдгреЗрд╢ рдЬреА", 
    guru: "рдмреГрд╣рд╕реНрдкрддрд┐ рджреЗрд╡",
    shukra: "рд▓рдХреНрд╖реНрдореА рдорд╛рдВ",
    shani: "рд╢рдирд┐ рджреЗрд╡"
  };
  return deities[lordPlanet] || "рд╡рд┐рд╖реНрдгреБ рднрдЧрд╡рд╛рди";
}

function getPlanetaryGems(planetaryPositions) {
  const gems = [];
  Object.keys(planetaryPositions).forEach(planet => {
    const strength = calculateRealPlanetaryStrength(planet, planetaryPositions[planet]);
    if (strength === 'strong') {
      const planetGems = {
        surya: "рдорд╛рдгрд┐рдХреНрдп",
        chandra: "рдореЛрддреА", 
        mangal: "рдореВрдВрдЧрд╛",
        budh: "рдкрдиреНрдирд╛",
        guru: "рдкреБрдЦрд░рд╛рдЬ",
        shukra: "рд╣реАрд░рд╛",
        shani: "рдиреАрд▓рдо"
      };
      if (planetGems[planet]) {
        gems.push(planetGems[planet]);
      }
    }
  });
  return gems;
}

function getTransitWarning(planet) {
  const warnings = {
    surya: "рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рд╕реЗ рд╡рд┐рдирдореНрд░рддрд╛ рд╕реЗ рдкреЗрд╢ рдЖрдПрдВ",
    chandra: "рднрд╛рд╡рдирд╛рддреНрдордХ рдирд┐рд░реНрдгрдп рд▓реЗрдиреЗ рд╕реЗ рдмрдЪреЗрдВ",
    mangal: "рдЧреБрд╕реНрд╕реЗ рдкрд░ рдХрд╛рдмреВ рд░рдЦреЗрдВ рдФрд░ рджреБрд░реНрдШрдЯрдирд╛рдУрдВ рд╕реЗ рдмрдЪреЗрдВ",
    budh: "рдЧрд▓рдд рд╕реВрдЪрдирд╛ рдФрд░ рднреНрд░рдо рд╕реЗ рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ",
    guru: "рдЕрддрд┐ рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реЗ рдмрдЪреЗрдВ",
    shukra: "рд░рд┐рд╢реНрддреЛрдВ рдореЗрдВ рдзреИрд░реНрдп рд░рдЦреЗрдВ",
    shani: "рдзреИрд░реНрдп рд░рдЦреЗрдВ рдФрд░ рдХрдбрд╝реА рдореЗрд╣рдирдд рдХрд░рддреЗ рд░рд╣реЗрдВ",
    rahu: "рдзреЛрдЦрд╛рдзрдбрд╝реА рдФрд░ рднреНрд░рдо рд╕реЗ рдмрдЪреЗрдВ",
    ketu: "рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╕рд╛рдзрдирд╛ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ"
  };
  return warnings[planet] || "рд╕рд╛рдорд╛рдиреНрдп рд╕рд╛рд╡рдзрд╛рдиреА рдмрд░рддреЗрдВ";
}
