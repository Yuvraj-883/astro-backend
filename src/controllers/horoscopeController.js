// ../src/controllers/horoscopeController.js

import { 
  generateDailyHoroscope, 
  getAllSignsHoroscope, 
  getWeeklyHoroscope as generateWeeklyHoroscope,
  vedicSigns 
} from '../services/dailyHoroscope.js';
import { 
  getPanchang, 
  getCurrentNakshatra, 
  getCurrentPlanetaryPositions,
  getAuspiciousMuhurat 
} from '../services/vedicCalculations.js';

/**
 * Get daily horoscope for a specific raashi
 */
export const getDailyHoroscope = async (req, res) => {
  try {
    const { raashi } = req.params;
    const { date } = req.query;
    
    // Validate raashi
    if (!vedicSigns[raashi.toLowerCase()]) {
      return res.status(400).json({
        success: false,
        error: "Invalid raashi. Valid options: " + Object.keys(vedicSigns).join(', ')
      });
    }
    
    // Parse date or use today
    const targetDate = date ? new Date(date) : new Date();
    if (isNaN(targetDate.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid date format. Use YYYY-MM-DD"
      });
    }
    
    const horoscope = generateDailyHoroscope(raashi, targetDate);
    
    res.json({
      success: true,
      data: horoscope,
      message: `${horoscope.raashi} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§ú ‡§ï‡§æ ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à!`
    });
    
  } catch (error) {
    console.error('Error generating daily horoscope:', error);
    res.status(500).json({
      success: false,
      error: "‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
    });
  }
};

/**
 * Get horoscope for all zodiac signs
 */
export const getAllHoroscopes = async (req, res) => {
  try {
    const { date } = req.query;
    const targetDate = date ? new Date(date) : new Date();
    
    if (date && isNaN(targetDate.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid date format. Use YYYY-MM-DD"
      });
    }
    
    const allHoroscopes = getAllSignsHoroscope(targetDate);
    
    res.json({
      success: true,
      data: allHoroscopes,
      date: targetDate.toLocaleDateString('hi-IN'),
      message: "‡§∏‡§≠‡•Ä ‡§∞‡§æ‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à!"
    });
    
  } catch (error) {
    console.error('Error generating all horoscopes:', error);
    res.status(500).json({
      success: false,
      error: "‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get weekly horoscope for a raashi
 */
export const getWeeklyHoroscope = async (req, res) => {
  try {
    const { raashi } = req.params;
    const { startDate } = req.query;
    
    if (!vedicSigns[raashi.toLowerCase()]) {
      return res.status(400).json({
        success: false,
        error: "Invalid raashi. Valid options: " + Object.keys(vedicSigns).join(', ')
      });
    }
    
    const weekStart = startDate ? new Date(startDate) : new Date();
    if (startDate && isNaN(weekStart.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid start date format. Use YYYY-MM-DD"
      });
    }
    
    const weeklyHoroscope = generateWeeklyHoroscope(raashi, weekStart);
    
    res.json({
      success: true,
      data: weeklyHoroscope,
      message: `${weeklyHoroscope.raashi} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à!`
    });
    
  } catch (error) {
    console.error('Error generating weekly horoscope:', error);
    res.status(500).json({
      success: false,
      error: "‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get current Panchang (Hindu calendar)
 */
export const getCurrentPanchang = async (req, res) => {
  try {
    const { date } = req.query;
    const targetDate = date ? new Date(date) : new Date();
    
    if (date && isNaN(targetDate.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid date format. Use YYYY-MM-DD"
      });
    }
    
    const panchang = getPanchang(targetDate);
    const muhurat = getAuspiciousMuhurat(targetDate);
    
    res.json({
      success: true,
      data: {
        panchang,
        muhurat,
        specialNote: "‡§™‡§Ç‡§ö‡§æ‡§Ç‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§µ‡•à‡§¶‡§ø‡§ï ‡§ó‡§£‡§®‡§æ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à"
      },
      message: "‡§Ü‡§ú ‡§ï‡§æ ‡§™‡§Ç‡§ö‡§æ‡§Ç‡§ó ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à!"
    });
    
  } catch (error) {
    console.error('Error generating panchang:', error);
    res.status(500).json({
      success: false,
      error: "‡§™‡§Ç‡§ö‡§æ‡§Ç‡§ó ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get current nakshatra information
 */
export const getCurrentNakshatraInfo = async (req, res) => {
  try {
    const { date } = req.query;
    const targetDate = date ? new Date(date) : new Date();
    
    if (date && isNaN(targetDate.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid date format. Use YYYY-MM-DD"
      });
    }
    
    const nakshatra = getCurrentNakshatra(targetDate);
    
    res.json({
      success: true,
      data: {
        nakshatra,
        significance: getNakshatraSignificance(nakshatra),
        remedies: getNakshatraRemedies(nakshatra)
      },
      message: `‡§Ü‡§ú ‡§ï‡§æ ‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞ ‡§π‡•à: ${nakshatra.name}`
    });
    
  } catch (error) {
    console.error('Error getting nakshatra info:', error);
    res.status(500).json({
      success: false,
      error: "‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get current planetary positions
 */
export const getPlanetaryPositions = async (req, res) => {
  try {
    const { date } = req.query;
    const targetDate = date ? new Date(date) : new Date();
    
    if (date && isNaN(targetDate.getTime())) {
      return res.status(400).json({
        success: false,
        error: "Invalid date format. Use YYYY-MM-DD"
      });
    }
    
    const positions = getCurrentPlanetaryPositions(targetDate);
    
    res.json({
      success: true,
      data: {
        date: targetDate.toLocaleDateString('hi-IN'),
        positions,
        note: "‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§∏‡§∞‡§≤‡•Ä‡§ï‡•É‡§§ ‡§ó‡§£‡§®‡§æ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡§Ç"
      },
      message: "‡§Ü‡§ú ‡§ï‡•Ä ‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç!"
    });
    
  } catch (error) {
    console.error('Error getting planetary positions:', error);
    res.status(500).json({
      success: false,
      error: "‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get horoscope in chat format (for chatbot integration)
 */
export const getHoroscopeForChat = async (req, res) => {
  try {
    const { raashi, aspect = 'overall' } = req.params;
    
    if (!vedicSigns[raashi.toLowerCase()]) {
      return res.status(400).json({
        success: false,
        error: "Invalid raashi"
      });
    }
    
    const horoscope = generateDailyHoroscope(raashi);
    let response = "";
    
    switch (aspect) {
      case 'love':
        response = `üíï ‡§™‡•ç‡§∞‡•á‡§Æ ‡§ú‡•Ä‡§µ‡§®: ${horoscope.predictions.love}`;
        break;
      case 'career':
        response = `üöÄ ‡§ï‡§∞‡§ø‡§Ø‡§∞: ${horoscope.predictions.career}`;
        break;
      case 'health':
        response = `üí™ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø: ${horoscope.predictions.health}`;
        break;
      case 'finance':
        response = `üí∞ ‡§ß‡§®: ${horoscope.predictions.finance}`;
        break;
      default:
        response = `${horoscope.emoji} ${horoscope.raashi} ‡§∞‡§æ‡§∂‡§ø‡§´‡§≤:\n\n${horoscope.predictions.overall}\n\nüíï ‡§™‡•ç‡§∞‡•á‡§Æ: ${horoscope.predictions.love}\nüöÄ ‡§ï‡§∞‡§ø‡§Ø‡§∞: ${horoscope.predictions.career}\nüí™ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø: ${horoscope.predictions.health}\nüí∞ ‡§ß‡§®: ${horoscope.predictions.finance}`;
    }
    
    res.json({
      success: true,
      data: {
        response,
        luckyNumber: horoscope.luckyElements.numbers[0],
        luckyColor: horoscope.luckyElements.colors[0],
        mantra: horoscope.mantra
      }
    });
    
  } catch (error) {
    console.error('Error generating chat horoscope:', error);
    res.status(500).json({
      success: false,
      error: "‡§∞‡§æ‡§∂‡§ø‡§´‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Get lucky elements for today
 */
export const getTodayLucky = async (req, res) => {
  try {
    const { raashi } = req.params;
    
    if (!vedicSigns[raashi.toLowerCase()]) {
      return res.status(400).json({
        success: false,
        error: "Invalid raashi"
      });
    }
    
    const horoscope = generateDailyHoroscope(raashi);
    
    res.json({
      success: true,
      data: {
        raashi: horoscope.raashi,
        lucky: horoscope.luckyElements,
        remedies: horoscope.remedies,
        auspiciousTime: horoscope.auspiciousTime,
        mantra: horoscope.mantra
      },
      message: "‡§Ü‡§ú ‡§ï‡•á ‡§∂‡•Å‡§≠ ‡§§‡§§‡•ç‡§µ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç!"
    });
    
  } catch (error) {
    console.error('Error getting lucky elements:', error);
    res.status(500).json({
      success: false,
      error: "‡§∂‡•Å‡§≠ ‡§§‡§§‡•ç‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§"
    });
  }
};

/**
 * Helper functions
 */
function getNakshatraSignificance(nakshatra) {
  const significances = {
    "‡§Ö‡§∂‡•ç‡§µ‡§ø‡§®‡•Ä": "‡§§‡•Ä‡§µ‡•ç‡§∞ ‡§ó‡§§‡§ø, ‡§®‡§Ø‡§æ ‡§Ü‡§∞‡§Ç‡§≠, ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∂‡§ï‡•ç‡§§‡§ø",
    "‡§≠‡§∞‡§£‡•Ä": "‡§ú‡§®‡•ç‡§Æ-‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§ö‡§ï‡•ç‡§∞, ‡§§‡§™‡§∏‡•ç‡§Ø‡§æ, ‡§ß‡•à‡§∞‡•ç‡§Ø",
    "‡§ï‡•É‡§§‡•ç‡§§‡§ø‡§ï‡§æ": "‡§Ö‡§ó‡•ç‡§®‡§ø ‡§§‡§§‡•ç‡§µ, ‡§ï‡§æ‡§ü‡§®‡•á ‡§ï‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø, ‡§∂‡•Å‡§¶‡•ç‡§ß‡•Ä‡§ï‡§∞‡§£",
    "‡§∞‡•ã‡§π‡§ø‡§£‡•Ä": "‡§∏‡•å‡§Ç‡§¶‡§∞‡•ç‡§Ø, ‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ, ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß‡§ø",
    "‡§Æ‡•É‡§ó‡§∂‡§ø‡§∞‡§æ": "‡§ñ‡•ã‡§ú, ‡§ú‡§ø‡§ú‡•ç‡§û‡§æ‡§∏‡§æ, ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∂‡§ï‡•ç‡§§‡§ø"
  };
  
  return significances[nakshatra.name] || "‡§µ‡§ø‡§∂‡•á‡§∑ ‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞ ‡§∂‡§ï‡•ç‡§§‡§ø";
}

function getNakshatraRemedies(nakshatra) {
  const remedies = {
    "‡§Ö‡§∂‡•ç‡§µ‡§ø‡§®‡•Ä": ["‡§Ö‡§∂‡•ç‡§µ‡§ø‡§®‡•Ä ‡§ï‡•Å‡§Æ‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ", "‡§ó‡•Å‡§°‡§º ‡§ï‡§æ ‡§¶‡§æ‡§®", "‡§ò‡•ã‡§°‡§º‡•á ‡§ï‡•Ä ‡§∏‡•á‡§µ‡§æ"],
    "‡§≠‡§∞‡§£‡•Ä": ["‡§Ø‡§Æ ‡§¶‡•á‡§µ ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ", "‡§ï‡§æ‡§≤‡•á ‡§§‡§ø‡§≤ ‡§ï‡§æ ‡§¶‡§æ‡§®", "‡§™‡§ø‡§§‡•É ‡§™‡•Ç‡§ú‡§æ"],
    "‡§ï‡•É‡§§‡•ç‡§§‡§ø‡§ï‡§æ": ["‡§Ö‡§ó‡•ç‡§®‡§ø ‡§¶‡•á‡§µ ‡§ï‡•Ä ‡§™‡•Ç‡§ú‡§æ", "‡§ß‡•Ç‡§™-‡§¶‡•Ä‡§™ ‡§ú‡§≤‡§æ‡§®‡§æ", "‡§≤‡§æ‡§≤ ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§¶‡§æ‡§®"]
  };
  
  return remedies[nakshatra.name] || ["‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•Ç‡§ú‡§æ", "‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ú‡§æ‡§™", "‡§¶‡§æ‡§®-‡§™‡•Å‡§£‡•ç‡§Ø"];
}
